# -*- coding: utf-8 -*-
"""Prediksi Harga Bitcoin dengan Neural Network dan Analisis ATR.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jFsPCAiJfBJjqhDmex_Ilx4k0Dn5csTW
"""

import pandas as pd
import numpy as np
import tensorflow as tf
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
import matplotlib.pyplot as plt
import seaborn as sns

"""# 1. MEMUAT DAN MEMPERSIAPKAN DATA"""

# Mengatur gaya visualisasi
sns.set_style("whitegrid")
plt.style.use("fivethirtyeight")

# Muat dataset dari file CSV
df = pd.read_csv('hasil_atr_btc.csv')

# Menghapus kolom yang tidak diperlukan
# df = df.drop(columns=['Unnamed: 0']) # This column does not exist

# Mengubah kolom 'date' menjadi tipe data datetime dan menjadikannya sebagai index
df['Timestamp'] = pd.to_datetime(df['Timestamp'])
df.set_index('Timestamp', inplace=True)

# Memeriksa data yang hilang
print("Pemeriksaan nilai yang hilang:")
print(df.isnull().sum())
print("-" * 30)

"""# 2. PREPROCESSING DATA"""

# Mendefinisikan fitur (X) dan target (y)
features = ['Open', 'High', 'Low', 'Volume', 'ATR']
target = 'Close'

X = df[features]
y = df[[target]] # Menggunakan kurung siku ganda agar tetap menjadi DataFrame

# Normalisasi data ke rentang [0, 1]
scaler_X = MinMaxScaler()
X_scaled = scaler_X.fit_transform(X)

scaler_y = MinMaxScaler()
y_scaled = scaler_y.fit_transform(y)

# Membagi data menjadi data latih (80%) dan data uji (20%)
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y_scaled, test_size=0.2, random_state=42, shuffle=False)

print(f"Jumlah data latih: {X_train.shape[0]}")
print(f"Jumlah data uji: {X_test.shape[0]}")
print("-" * 30)

"""# 3. MEMBANGUN MODEL JARINGAN SARAF"""

model = tf.keras.Sequential([
    # Input layer dengan bentuk sesuai jumlah fitur
    tf.keras.layers.Input(shape=(X_train.shape[1],)),

    # Hidden layer pertama
    tf.keras.layers.Dense(64, activation='relu'),

    # Hidden layer kedua
    tf.keras.layers.Dense(32, activation='relu'),

    # Output layer untuk prediksi regresi (1 neuron, tanpa aktivasi/linear)
    tf.keras.layers.Dense(1, activation='linear')
])

# Mengompilasi model
model.compile(optimizer='adam', loss='mean_squared_error')

# Menampilkan ringkasan arsitektur model
model.summary()
print("-" * 30)

"""# 4. MELATIH MODEL

"""

print("Memulai pelatihan model...")
# Melatih model dan menyimpan riwayat pelatihan
history = model.fit(
    X_train,
    y_train,
    epochs=50,
    batch_size=32,
    validation_data=(X_test, y_test),
    verbose=1 # Menampilkan progress bar
)
print("Pelatihan model selesai.")
print("-" * 30)

"""# 5. EVALUASI MODEL

"""

from sklearn.metrics import mean_absolute_error, mean_squared_error

# Membuat prediksi pada data uji
y_pred_scaled = model.predict(X_test)

# Mengembalikan nilai prediksi dan nilai aktual ke skala aslinya
y_pred_actual = scaler_y.inverse_transform(y_pred_scaled)
y_test_actual = scaler_y.inverse_transform(y_test)

# Menghitung metrik evaluasi
mae = mean_absolute_error(y_test_actual.flatten(), y_pred_actual.flatten())
mse = mean_squared_error(y_test_actual.flatten(), y_pred_actual.flatten())
rmse = np.sqrt(mse)

print("Hasil Evaluasi Model pada Data Uji:")
print(f"Mean Absolute Error (MAE): ${mae:,.2f}")
print(f"Root Mean Squared Error (RMSE): ${rmse:,.2f}")
print("-" * 30)

"""# 6. VISUALISASI HASIL

"""

# Visualisasi 1: Grafik Loss Pelatihan vs Validasi
plt.figure(figsize=(14, 6))
plt.plot(history.history['loss'], label='Loss Pelatihan (Training Loss)')
plt.plot(history.history['val_loss'], label='Loss Validasi (Validation Loss)')
plt.title('Grafik Loss Pelatihan & Validasi Model')
plt.xlabel('Epoch')
plt.ylabel('Mean Squared Error (Loss)')
plt.legend()
plt.show()

# Visualisasi 2: Grafik Perbandingan Harga Aktual vs Prediksi
# Membuat DataFrame untuk memudahkan plotting
results_df = pd.DataFrame({
    'Tanggal': df.index[-len(y_test_actual):],
    'Harga Aktual': y_test_actual.flatten(),
    'Harga Prediksi': y_pred_actual.flatten()
})
results_df.set_index('Tanggal', inplace=True)


plt.figure(figsize=(16, 8))
plt.plot(results_df['Harga Aktual'], label='Harga Close Aktual', color='royalblue', linewidth=2)
plt.plot(results_df['Harga Prediksi'], label='Harga Close Prediksi', color='darkorange', linestyle='--', linewidth=2)
plt.title('Perbandingan Harga Penutupan (Close) Aktual vs Prediksi Model')
plt.xlabel('Tanggal')
plt.ylabel('Harga Close (USD)')
plt.legend()
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()